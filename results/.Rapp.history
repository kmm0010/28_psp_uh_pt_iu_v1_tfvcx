head(results)
spread#
# mode #
#
# porportion of d/b #
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/6_iubd_v2/results'#
#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepV', 'C', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)
subjs <- unique(results$workerID)#
length(subjs)
results$dummy <- 1
results$RT <- results$RT - 0.03918245869776482 * 1000
head(results)
spread#
# mode #
#
# porportion of d/b #
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/6_iubd_v2/results'#
#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepV', 'C', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))#
# # #
#
# computerproblem <- c('A2TBXASXZIRNNW')#
# results <- results[!(results $workerID %in% computerproblem), ]#
# results $workerID <- factor(results $workerID)#
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)#
subjs <- unique(results$workerID)#
length(subjs)#
results <- results[ , c('workerID', 'trialtype', 'stepV', 'C', 'stim', 'resp', 'RT', 'buttons')]
results$dummy <- 1#
results$RT <- results$RT - 0.03918245869776482 * 1000
head(results)
results $resp
results $respNumV <- ifelse(results $resp == 'EE', 1, #
                           ifelse(results $resp == 'OO', 0, 5))#
head(results)
duration <- NULL#
for (s in subjs) {#
	subj.results <- results[results$workerID == s, ]#
	xtab <- xtabs( ~ stim, data = subj.results)#
	print(s)#
	howlong <- sum(subj.results$RT)/1000/30#
	print(howlong)#
	duration <- c(duration, howlong)#
	# print( length(subj.results$resp) )#
}#
duration#
summary(duration)
tfamily <- 'DTLArgoT'#
tiles <- c(8, 8)#
results$RT#
summary(results$RT)
tiles <- c(8, 9)
par(family = tfamily)
plot(results$RT, pch=16, cex=0.6)
plot(results$RT, typ='l')
hist(results$RT)
hist(results$RT, breaks='Scott')
hist(results$RT, breaks='FD')
plot(results$RT[results$trialtype == 'p'], pch=16, cex=0.6)
plot(results$RT[results$trialtype == 'p'], typ='l')
xtab <- xtabs( ~ resp, data = results[results$trialtype == 'p', ])
barplot(xtab)
summary(results$RT[results$trialtype == 'p'])
par(mfrow= tiles, mar=c(1.9, 2, 1, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s & results$trialtype == 'p', ]#
	# plot(s.result$RT, main=s,typ='l', lwd='1.5', col='blue')#
	plot(s.result$RT, main=s, ylim=c(0, max(results $RT)), typ='l', lwd='1.5', col='blue')#
}
tiles <- c(9, 9)
par(mfrow= tiles, mar=c(1.9, 2, 1, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s & results$trialtype == 'p', ]#
	# plot(s.result$RT, main=s,typ='l', lwd='1.5', col='blue')#
	plot(s.result$RT, main=s, ylim=c(0, max(results $RT)), typ='l', lwd='1.5', col='blue')#
}
results <- results[results $trialtype == 't', ]
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.5, col='darkblue')
plot(results$RT, typ='l', col='darkblue')
plot(sort(results$RT), pch=16, cex=0.6, col='darkblue')
par(family = tfamily)#
xtab <- xtabs( ~ resp, data = results)#
barplot(xtab)
summary(results$RT)
RTs#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	print(dim(s.result)[1])#
	plot(s.result$RT, main=s, ylim=c(-200, 4400), typ='l', col='darkblue')#
}
C1 responses#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	# print(dim(s.result)[1])#
	plot(s.result$respNumC1, main=s, ylim=c(-0.5, 5.5), pch=16, col='darkblue')#
}
head(s.result)
V responses#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	# print(dim(s.result)[1])#
	plot(s.result$respNumV, main=s, ylim=c(-0.5, 5.5), pch=16, col='darkblue')#
}
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 200), main=s)#
	print(xtab)#
}
percentNoResp <- NULL#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 100), main=s)#
	# print(xtab)#
	noResp <- xtab['NULL'] / sum(xtab) * 100#
	percentNoResp <- c(percentNoResp, noResp)#
	print(s)#
	print(noResp)#
}
percent no response#
par(mar=c(10, 6, 2, 1), family = tfamily, cex=0.48)#
barplot(percentNoResp, names.arg=subjs, ylim=c(0,15), las=2, space=0.2, legend.text=FALSE)#
abline(mean(percentNoResp), 0, col='red')#
abline(median(percentNoResp), 0, col='blue')
all responses#
par(mar=c(8, 6, 2, 1), family = tfamily, cex=0.4)#
xtab <- xtabs( ~ resp + workerID, data = results)#
barplot(xtab, las=2, space=0.2, legend.text=TRUE)
spread#
# mode #
#
# porportion of d/b #
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/6_iubd_v2/results'#
#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepV', 'C', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))#
# # #
#
# computerproblem <- c('A2TBXASXZIRNNW')#
# results <- results[!(results $workerID %in% computerproblem), ]#
# results $workerID <- factor(results $workerID)#
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)#
subjs <- unique(results$workerID)#
length(subjs)#
results <- results[ , c('workerID', 'trialtype', 'stepV', 'C', 'stim', 'resp', 'RT', 'buttons')]#
results$dummy <- 1#
results$RT <- results$RT - 0.03918245869776482 * 1000#
head(results)#
results $respNumV <- ifelse(results $resp == 'EE', 1, #
                           ifelse(results $resp == 'OO', 0, 5))#
head(results)#
duration <- NULL#
for (s in subjs) {#
	subj.results <- results[results$workerID == s, ]#
	xtab <- xtabs( ~ stim, data = subj.results)#
	print(s)#
	howlong <- sum(subj.results$RT)/1000/30#
	print(howlong)#
	duration <- c(duration, howlong)#
	# print( length(subj.results$resp) )#
}#
duration#
summary(duration)#
tfamily <- 'DTLArgoT'#
tiles <- c(9, 9)#
results$RT#
summary(results$RT)#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.6)#
plot(results$RT, typ='l')#
hist(results$RT)#
hist(results$RT, breaks='Scott')#
hist(results$RT, breaks='FD')#
#####################
## practice#
#####################
plot(results$RT[results$trialtype == 'p'], pch=16, cex=0.6)#
plot(results$RT[results$trialtype == 'p'], typ='l')#
xtab <- xtabs( ~ resp, data = results[results$trialtype == 'p', ])#
barplot(xtab)#
#
summary(results$RT[results$trialtype == 'p'])#
par(mfrow= tiles, mar=c(1.9, 2, 1, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s & results$trialtype == 'p', ]#
	# plot(s.result$RT, main=s,typ='l', lwd='1.5', col='blue')#
	plot(s.result$RT, main=s, ylim=c(0, max(results $RT)), typ='l', lwd='1.5', col='blue')#
}#
results <- results[results $trialtype == 't', ]
remove extreme slow (6289.3262076)#
# results <- results[results $RT < 6288, ]#
# results[results $RT > 6287, ]#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.5, col='darkblue')#
plot(results$RT, typ='l', col='darkblue')#
plot(sort(results$RT), pch=16, cex=0.6, col='darkblue')#
par(family = tfamily)#
xtab <- xtabs( ~ resp, data = results)#
barplot(xtab)#
summary(results$RT)#
range(results$RT)#
range(results$RT)*1.1#
## RTs#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	print(dim(s.result)[1])#
	plot(s.result$RT, main=s, ylim=c(-200, 4400), typ='l', col='darkblue')#
}#
## V responses#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	# print(dim(s.result)[1])#
	plot(s.result$respNumV, main=s, ylim=c(-0.5, 5.5), pch=16, col='darkblue')#
}#
dim(s.result)#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 200), main=s)#
	print(xtab)#
}#
percentNoResp <- NULL#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 100), main=s)#
	# print(xtab)#
	noResp <- xtab['NULL'] / sum(xtab) * 100#
	percentNoResp <- c(percentNoResp, noResp)#
	print(s)#
	print(noResp)#
}#
## percent no response#
par(mar=c(10, 6, 2, 1), family = tfamily, cex=0.48)#
barplot(percentNoResp, names.arg=subjs, ylim=c(0,15), las=2, space=0.2, legend.text=FALSE)#
abline(mean(percentNoResp), 0, col='red')#
abline(median(percentNoResp), 0, col='blue')#
## all responses#
par(mar=c(8, 6, 2, 1), family = tfamily, cex=0.4)#
xtab <- xtabs( ~ resp + workerID, data = results)#
barplot(xtab, las=2, space=0.2, legend.text=TRUE)
alotoftimeouts <- c(#
                    ''# # 34.92647#
                    # 'A1MV8BTMX8MJEO', # 34.92647#
                    # 'A3316W4VTGJ0ED' # 21.32353#
                    # 'AYJVWVZNQVLP5' # 10.66176#
)#
resultsGood <- results#
subjsGood   <- unique(resultsGood $workerID)
resultsNoResponse <- resultsGood[resultsGood$resp == 'NULL', ]#
dim(resultsNoResponse)
resultsRespGood <- resultsGood[resultsGood$resp != 'NULL', ]#
resultsRespGood $resp <- factor(resultsRespGood $resp)#
dim(resultsRespGood)
summary(resultsRespGood $RT)
par(family = tfamily)#
plot(resultsRespGood $RT, pch=16, cex=0.1)#
abline(225, 0, col='blue')#
center <- mean(resultsRespGood $RT) * 0.5 + median(resultsRespGood $RT) * 0.5#
abline(center, 0, col='red', lwd=2)#
abline(3700, 0, col='black')#
points(resultsRespGood $RT, pch=16, cex=0.5)
plot(resultsRespGood $RT, typ='l')
hist(resultsRespGood $RT)
hist(resultsRespGood $RT, breaks='Scott')
hist(resultsRespGood $RT, breaks='FD')
borders <- c(2, 2, 1.2, 1)#
text.size <- 0.4#
#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- resultsRespGood[ resultsRespGood $workerID == s, ]#
	plot(s.result$RT, main=s, ylim=c(0, 4000), pch=16, cex=0.2)#
	abline(225, 0, col='blue')#
	abline(center, 0, col='red', lwd=2)#
	points(s.result$RT, pch=16, cex=0.8)#
	center <- mean(s.result$RT) * 0.5 + median(s.result$RT) * 0.5#
	# print(dim(s.result))#
}
resultsRespGood$resp <- factor(resultsRespGood$resp)
responses <- resultsRespGood[resultsRespGood$RT > 225, ]#
responses$RTlog <- log(responses$RT)
summary(responses $RT)
summary(responses $RTlog)
par(family = tfamily)#
plot(responses $RTlog, pch=16, cex=0.4)#
abline(log(225), 0, col='blue')#
center <- mean(responses $RTlog) * 0.5 + median(responses $RTlog) * 0.5#
abline(center, 0, col='red', lwd=2)
plot(responses $RTlog, typ='l')
hist(responses $RT)
hist(responses $RT, breaks='Scott')
hist(responses $RTlog)
hist(responses $RTlog, breaks='Scott')
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	plot(s.result$RTlog, main=s, ylim=c(5, 8.5), pch=16, cex=0.5)#
	# plot(s.result$RTlog, main=s, xlim=c(0, 212), ylim=c(4, 7.9), typ='l')#
	abline(log(225), 0, col='blue')#
	center <- mean(s.result$RTlog) * 0.5 + median(s.result$RTlog) * 0.5#
	abline(center, 0, col='red', lwd=2)#
	print(dim(s.result))#
}
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	hist(s.result$RTlog, breaks=seq(from=5, to=8.5, by=1/5), xlim=c(5,8.5), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/10), xlim=c(4,8), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/20), xlim=c(4,8), main=s)#
}
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 300), main=s)#
	print(xtab)#
}
xtab <- xtabs( ~ workerID  + stepC1, data = responses)#
xtab
xtab <- xtabs( ~ workerID  + stepV, data = responses)#
xtab
xtab <- xtabs( ~ workerID  + C, data = responses)#
xtab
xtab <- xtabs( ~ workerID  + stepV + C, data = responses)#
xtab
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepV, responses $dummy, responses $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumC1, responses $stepC1, mean)#
vsd  <- tapply(responses $respNumC1, responses $stepC1, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
head(responses)
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepV, responses $dummy, responses $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3)
xlabel <- '1 [i] – [u] 17'#
ylabel <- 'prop. ‘ee’ resp.'#
# xlabelc <- '1 [b] – [d] 17'#
# ylabelc <- 'prop. ‘d’ resp.'
borders <- c(4.1,4.3,1.5,0.4)#
#
responses $dummy <- 1#
#
length(responses $respNumV)#
length(responses $stepV)#
length(responses $dummy)#
# change c to 1, 3, 4, 5, 6, 8, 17#
###
## #
###
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepV, responses $dummy, responses $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumC1, responses $stepC1, mean)#
vsd  <- tapply(responses $respNumC1, responses $stepC1, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepV, responses $dummy, responses $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumV, responses $stepV, mean)#
vsd  <- tapply(responses $respNumV, responses $stepV, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
borders <- c(4, 4, 1.2, 0.3)#
text.size <- 0.35#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $dummy, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
s.result $stepV
sort(unique(responses$stepV ))
head(responses)#
#
sort(unique(responses$stepV ))#
endpoints <- responses[responses$stepV == 1 | responses$stepV == 54, ]#
endpoints$stepV <- factor(endpoints$stepV)
xtab <- xtabs( ~ resp + stepV, data = endpoints)#
xtab
subjCorrect <- NULL#
subjWrong   <- NULL#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- endpoints[ endpoints $workerID == s, ]#
	xtab <- xtabs( ~ resp + stepV, data = s.result)#
	totali <- sum(xtab[ , 1])#
	correcti <- xtab['EE', 1] #
	totalu <- sum(xtab[ , 2])#
	correctu <- xtab['OO', 2] #
	percentcorrecti <- correcti / totali * 100#
	percentcorrectu <- correctu / totalu * 100#
	print(s)#
	# print( percentcorrect )#
	print( xtab )#
	barplot( percentcorrecti, ylim=c(0, 100), main=s)#
	if (percentcorrecti > 70 & percentcorrectu > 70 ) {#
		subjCorrect <- c(subjCorrect, s)#
	} else {subjWrong <- c(subjWrong, s)}#
}#
length(subjCorrect)#
length(subjWrong)
s.result
xtabs( ~ resp + stepV, data = s.result)
percentcorrecti
percentcorrectu
tiles <- c(8, 7)#
borders <- c(4, 4, 1.2, 0.3)#
#
text.size <- 0.35#
## correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $dummy, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
tiles <- c(9, 9)#
borders <- c(4, 4, 1.2, 0.3)#
#
text.size <- 0.35#
## correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $dummy, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
wrong#
par(mfrow=c(5,5), mar= borders, cex= text.size, family = tfamily)#
for (s in subjWrong) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $dummy, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
xtab <- xtabs( ~ resp + stepC1, data = endpoints)#
xtab
xtab <- xtabs( ~ resp + stepV, data = endpoints)#
xtab
xtab <- xtabs( ~ resp + stepV + C, data = endpoints)#
xtab
xtab <- xtabs( ~ resp + C + stepV, data = endpoints)#
xtab
responsesCorrect <- responses[(responses$workerID %in% subjCorrect), ]
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepV, responsesCorrect $dummy, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responsesCorrect $respNumV, responsesCorrect $stepV, mean)#
vsd  <- tapply(responsesCorrect $respNumV, responsesCorrect $stepV, sd)#
vsem <- vsd / sqrt( length(subjCorrect) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepV, responsesCorrect $C, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepV, responsesCorrect $C, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C, responsesCorrect $stepV, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C, responsesCorrect $stepV, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C, responsesCorrect $stepV, responsesCorrect $respNumV, xlab='', ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C, responsesCorrect $dummy, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepV, responsesCorrect $C, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
par(mfrow=c(7,8), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $C, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
par(mfrow=c(2,2), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $C, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
d=red, b=black#
par(mfrow=c(9,9), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $C, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
subjCorrect
d=red, b=black#
par(mfrow=c(9,8), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $C, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
d=red, b=black#
par(mfrow=c(10,8), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $C, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
d=red, b=black#
par(mfrow=c(8,10), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $C, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
d=red, b=black#
par(mfrow=c(8,10), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $C, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepV, responsesCorrect $C, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
unique(responsesCorrect$stepV)
mean(unique(responsesCorrect$stepV))
responsesCorrect$stepV
responsesCorrect$stepV - mean(unique(responsesCorrect$stepV))
responsesCorrect$stepVc <- responsesCorrect$stepV - mean(unique(responsesCorrect$stepV))
mean(responsesCorrect$stepVc )
head(responsesCorrect)
responsesCorrect$C
responsesCorrect$Cc <- ifelse(responsesCorrect$C == 'b', -1, 1)
vResp.stepC <- lmer(respNumV ~ stepVc + Cc + (1 + stepVc + Cc | workerID), family = "binomial", data = responsesCorrect )#
summary(vResp.stepC)
vResp.stepC
vResp.stepC <- lmer(respNumV ~ stepVc + Cc + (1 | workerID), family = "binomial", data = responsesCorrect )#
summary(vResp.stepC)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepV, responsesCorrect $dummy, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responsesCorrect $respNumV, responsesCorrect $stepV, mean)#
vsd  <- tapply(responsesCorrect $respNumV, responsesCorrect $stepV, sd)#
vsem <- vsd / sqrt( length(subjCorrect) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $dummy, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
spread#
# mode #
#
# porportion of d/b #
#
## 7-step continuum b-d  (24 data points each step)#
## 2 contexts __l, __r  (84 data points each context)#
## 12 data points in each step/context cell#
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/5_bdlaaraa_v2/results'#
#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))#
results$headphones <- as.character(results$headphones)#
results$headphones[results$workerID == 'A1QK90OHMNVT6N'] <- 'headphoneyes'#
results$headphones[results$workerID == 'AQGTIJZIVSL7D%0A'] <- 'headphoneyes'#
results$headphones <- factor(results$headphones)#
computerproblem <- c('A21GYIDUNZ4BHE')#
results <- results[!(results $workerID %in% computerproblem), ]#
results $workerID <- factor(results $workerID)
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)#
subjs <- unique(results$workerID)#
length(subjs)#
results <- results[ , c('workerID', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'buttons')]#
results$dummy <- 1#
results$RT <- results$RT - 0.03473293020912068 * 1000#
results $resp#
class(results $resp)#
#
head(results)#
results $respNumC1 <- ifelse(results $resp == 'B', 0, #
                           ifelse(results $resp == 'D', 1, 5))#
head(results)#
duration <- NULL#
for (s in subjs) {#
	subj.results <- results[results$workerID == s, ]#
	xtab <- xtabs( ~ stim, data = subj.results)#
	print(s)#
	howlong <- sum(subj.results$RT)/1000/30#
	print(howlong)#
	duration <- c(duration, howlong)#
	# print( length(subj.results$resp) )#
}#
duration#
summary(duration)#
tfamily <- 'DTLArgoT'#
tiles <- c(9, 9)#
results$RT#
summary(results$RT)#
# par(family = tfamily)#
# plot(results$RT, pch=16, cex=0.6)#
# plot(results$RT, typ='l')#
# hist(results$RT)#
# hist(results$RT, breaks='Scott')#
# hist(results$RT, breaks='FD')#
#####################
## practice#
#####################
# # #
#
# plot(results$RT[results$trialtype == 'p'], pch=16, cex=0.6)#
# plot(results$RT[results$trialtype == 'p'], typ='l')#
# xtab <- xtabs( ~ resp, data = results[results$trialtype == 'p', ])#
# barplot(xtab)#
#
# summary(results$RT[results$trialtype == 'p'])#
# par(mfrow= tiles, mar=c(1.9, 2, 1, 0.5), cex=0.5, family = tfamily)#
# for (s in subjs) {#
	# s.result <- results[ results$workerID == s & results$trialtype == 'p', ]#
	# # plot(s.result$RT, main=s,typ='l', lwd='1.5', col='blue')#
	# plot(s.result$RT, main=s, ylim=c(0, max(results $RT)), typ='l', lwd='1.5', col='blue')#
# }#
results <- results[results $trialtype == 't', ]#
#####################
# ## remove extreme slow (6289.3262076)#
# results <- results[results $RT < 6288, ]#
# results[results $RT > 6287, ]#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.5, col='darkblue')#
plot(results$RT, typ='l', col='darkblue')#
plot(sort(results$RT), pch=16, cex=0.6, col='darkblue')#
par(family = tfamily)#
xtab <- xtabs( ~ resp, data = results)#
barplot(xtab)#
summary(results$RT)#
range(results$RT)#
range(results$RT)*1.1#
## RTs#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	print(dim(s.result)[1])#
	plot(s.result$RT, main=s, ylim=c(-200, 4400), typ='l', col='darkblue')#
}#
## C1 responses#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	# print(dim(s.result)[1])#
	plot(s.result$respNumC1, main=s, ylim=c(-0.5, 5.5), pch=16, col='darkblue')#
}#
dim(s.result)#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 200), main=s)#
	print(xtab)#
}#
percentNoResp <- NULL#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 100), main=s)#
	# print(xtab)#
	noResp <- xtab['NULL'] / sum(xtab) * 100#
	percentNoResp <- c(percentNoResp, noResp)#
	print(s)#
	print(noResp)#
}#
## percent no response#
par(mar=c(10, 6, 2, 1), family = tfamily, cex=0.48)#
barplot(percentNoResp, names.arg=subjs, ylim=c(0, 40), las=2, space=0.2, legend.text=FALSE)#
abline(mean(percentNoResp), 0, col='red')#
abline(median(percentNoResp), 0, col='blue')#
# # #
# ## all responses#
# par(mar=c(8, 6, 2, 1), family = tfamily, cex=0.4)#
# xtab <- xtabs( ~ resp + workerID, data = results)#
# barplot(xtab, las=2, space=0.2, legend.text=TRUE)#
##############################################
## remove folks who didnt respond#
##############################################
alotoftimeouts <- c(#
                    'A194KANUT0CSBV' # # 34.92647#
                    # 'A1MV8BTMX8MJEO', # 34.92647#
                    # 'A3316W4VTGJ0ED' # 21.32353#
                    # 'AYJVWVZNQVLP5' # 10.66176#
)#
resultsGood <- results#
subjsGood   <- unique(resultsGood $workerID)#
xtab <- xtabs( ~ workerID + resp + stepC1, data = resultsGood)#
xtab#
##############################################
## exclude no response#
##############################################
resultsNoResponse <- resultsGood[resultsGood$resp == 'NULL', ]#
dim(resultsNoResponse)#
resultsRespGood <- resultsGood[resultsGood$resp != 'NULL', ]#
resultsRespGood $resp <- factor(resultsRespGood $resp)#
dim(resultsRespGood)#
summary(resultsRespGood $RT)#
par(family = tfamily)#
plot(resultsRespGood $RT, pch=16, cex=0.1)#
abline(225, 0, col='blue')#
center <- mean(resultsRespGood $RT) * 0.5 + median(resultsRespGood $RT) * 0.5#
abline(center, 0, col='red', lwd=2)#
abline(3700, 0, col='black')#
points(resultsRespGood $RT, pch=16, cex=0.5)#
#
plot(resultsRespGood $RT, typ='l')#
hist(resultsRespGood $RT)#
hist(resultsRespGood $RT, breaks='Scott')#
# hist(resultsRespGood $RT, breaks='FD')#
borders <- c(2, 2, 1.2, 1)#
text.size <- 0.4#
#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- resultsRespGood[ resultsRespGood $workerID == s, ]#
	plot(s.result$RT, main=s, ylim=c(0, 4000), pch=16, cex=0.2)#
	abline(225, 0, col='blue')#
	abline(center, 0, col='red', lwd=2)#
	points(s.result$RT, pch=16, cex=0.8)#
	center <- mean(s.result$RT) * 0.5 + median(s.result$RT) * 0.5#
	# print(dim(s.result))#
}#
resultsRespGood$resp <- factor(resultsRespGood$resp)#
##############################################
## exclude faster than 200ms & practice items#
##############################################
responses <- resultsRespGood[resultsRespGood$RT > 225, ]#
responses$RTlog <- log(responses$RT)#
summary(responses $RT)#
summary(responses $RTlog)#
par(family = tfamily)#
plot(responses $RTlog, pch=16, cex=0.4)#
abline(log(225), 0, col='blue')#
center <- mean(responses $RTlog) * 0.5 + median(responses $RTlog) * 0.5#
abline(center, 0, col='red', lwd=2)#
plot(responses $RTlog, typ='l')#
hist(responses $RT)#
hist(responses $RT, breaks='Scott')#
# hist(responses $RT, breaks='FD')#
hist(responses $RTlog)#
hist(responses $RTlog, breaks='Scott')#
# hist(responses $RTlog, breaks='FD')#
#
# hist(responses $RTlog, breaks=seq(from=5, to=8, by=1/6), xlim=c(5,8))#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	plot(s.result$RTlog, main=s, ylim=c(5, 8.5), pch=16, cex=0.5)#
	# plot(s.result$RTlog, main=s, xlim=c(0, 212), ylim=c(4, 7.9), typ='l')#
	abline(log(225), 0, col='blue')#
	center <- mean(s.result$RTlog) * 0.5 + median(s.result$RTlog) * 0.5#
	abline(center, 0, col='red', lwd=2)#
	print(dim(s.result))#
}#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	hist(s.result$RTlog, breaks=seq(from=5, to=8.5, by=1/5), xlim=c(5,8.5), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/10), xlim=c(4,8), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/20), xlim=c(4,8), main=s)#
}#
# borders <- c(, 2.4, 2, 2.3)#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 300), main=s)#
	print(xtab)#
}#
##############################################
## ID function#
##############################################
head(responses)#
xtab <- xtabs( ~ workerID  + stepC1, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + C2, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + stepC1 + C2, data = responses)#
xtab
xlabel <- '1 [b] – [d] 17'#
ylabel <- 'prop. ‘d’ resp.'#
# xlabelc <- '1 [b] – [d] 17'#
# ylabelc <- 'prop. ‘d’ resp.'#
borders <- c(4.1,4.3,1.5,0.4)#
#
responses $dummy <- 1#
#
length(responses $respNumC1)#
length(responses $stepC1)#
length(responses $dummy)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepC1, responses $dummy, responses $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumC1, responses $stepC1, mean)#
vsd  <- tapply(responses $respNumC1, responses $stepC1, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepC1, responses $dummy, responses $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumC1, responses $stepC1, mean)#
vsd  <- tapply(responses $respNumC1, responses $stepC1, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
borders <- c(4, 4, 1.2, 0.3)#
text.size <- 0.35#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
head(responses)
spread#
# mode #
#
# porportion of d/b #
#
## 7-step continuum b-d  (24 data points each step)#
## 2 contexts __l, __r  (84 data points each context)#
## 12 data points in each step/context cell#
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/5_bdlaaraa_v2/results'#
#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))
results$headphones <- as.character(results$headphones)#
results$headphones[results$workerID == 'A1QK90OHMNVT6N'] <- 'headphoneyes'#
results$headphones[results$workerID == 'AQGTIJZIVSL7D%0A'] <- 'headphoneyes'#
results$headphones <- factor(results$headphones)
computerproblem <- c('A21GYIDUNZ4BHE')#
results <- results[!(results $workerID %in% computerproblem), ]#
results $workerID <- factor(results $workerID)
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)#
subjs <- unique(results$workerID)#
length(subjs)
head(results)
results <- results[ , c('workerID', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'buttons')]
results$dummy <- 1#
results$RT <- results$RT - 0.03473293020912068 * 1000
head(results)
spread#
# mode #
#
# porportion of d/b #
#
## 7-step continuum b-d  (24 data points each step)#
## 2 contexts __l, __r  (84 data points each context)#
## 12 data points in each step/context cell#
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/5_bdlaaraa_v2/results'#
#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))#
results$headphones <- as.character(results$headphones)#
results$headphones[results$workerID == 'A1QK90OHMNVT6N'] <- 'headphoneyes'#
results$headphones[results$workerID == 'AQGTIJZIVSL7D%0A'] <- 'headphoneyes'#
results$headphones <- factor(results$headphones)#
computerproblem <- c('A21GYIDUNZ4BHE')#
results <- results[!(results $workerID %in% computerproblem), ]#
results $workerID <- factor(results $workerID)#
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)#
subjs <- unique(results$workerID)#
length(subjs)#
results <- results[ , c('workerID', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'buttons')]#
results$dummy <- 1#
results$RT <- results$RT - 0.03473293020912068 * 1000
head(results)
spread#
# mode #
#
# porportion of d/b #
#
## 7-step continuum b-d  (24 data points each step)#
## 2 contexts __l, __r  (84 data points each context)#
## 12 data points in each step/context cell#
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/5_bdlaaraa_v2/results'#
#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))#
results$headphones <- as.character(results$headphones)#
results$headphones[results$workerID == 'A1QK90OHMNVT6N'] <- 'headphoneyes'#
results$headphones[results$workerID == 'AQGTIJZIVSL7D%0A'] <- 'headphoneyes'#
results$headphones <- factor(results$headphones)#
computerproblem <- c('A21GYIDUNZ4BHE')#
results <- results[!(results $workerID %in% computerproblem), ]#
results $workerID <- factor(results $workerID)#
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)#
subjs <- unique(results$workerID)#
length(subjs)#
results <- results[ , c('workerID', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'buttons')]#
results$dummy <- 1#
results$RT <- results$RT - 0.03473293020912068 * 1000#
head(results)
results $respNumC1 <- ifelse(results $resp == 'B', 0, #
                           ifelse(results $resp == 'D', 1, 5))
head(results)
duration <- NULL#
for (s in subjs) {#
	subj.results <- results[results$workerID == s, ]#
	xtab <- xtabs( ~ stim, data = subj.results)#
	print(s)#
	howlong <- sum(subj.results$RT)/1000/30#
	print(howlong)#
	duration <- c(duration, howlong)#
	# print( length(subj.results$resp) )#
}#
duration#
summary(duration)#
tfamily <- 'DTLArgoT'#
tiles <- c(9, 9)#
results$RT#
summary(results$RT)#
# par(family = tfamily)#
# plot(results$RT, pch=16, cex=0.6)#
# plot(results$RT, typ='l')#
# hist(results$RT)#
# hist(results$RT, breaks='Scott')#
# hist(results$RT, breaks='FD')#
#####################
## practice#
#####################
# # #
#
# plot(results$RT[results$trialtype == 'p'], pch=16, cex=0.6)#
# plot(results$RT[results$trialtype == 'p'], typ='l')#
# xtab <- xtabs( ~ resp, data = results[results$trialtype == 'p', ])#
# barplot(xtab)#
#
# summary(results$RT[results$trialtype == 'p'])#
# par(mfrow= tiles, mar=c(1.9, 2, 1, 0.5), cex=0.5, family = tfamily)#
# for (s in subjs) {#
	# s.result <- results[ results$workerID == s & results$trialtype == 'p', ]#
	# # plot(s.result$RT, main=s,typ='l', lwd='1.5', col='blue')#
	# plot(s.result$RT, main=s, ylim=c(0, max(results $RT)), typ='l', lwd='1.5', col='blue')#
# }#
results <- results[results $trialtype == 't', ]#
#####################
# ## remove extreme slow (6289.3262076)#
# results <- results[results $RT < 6288, ]#
# results[results $RT > 6287, ]#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.5, col='darkblue')#
plot(results$RT, typ='l', col='darkblue')#
plot(sort(results$RT), pch=16, cex=0.6, col='darkblue')#
par(family = tfamily)#
xtab <- xtabs( ~ resp, data = results)#
barplot(xtab)#
summary(results$RT)#
range(results$RT)#
range(results$RT)*1.1#
## RTs#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	print(dim(s.result)[1])#
	plot(s.result$RT, main=s, ylim=c(-200, 4400), typ='l', col='darkblue')#
}#
## C1 responses#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	# print(dim(s.result)[1])#
	plot(s.result$respNumC1, main=s, ylim=c(-0.5, 5.5), pch=16, col='darkblue')#
}#
dim(s.result)#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 200), main=s)#
	print(xtab)#
}#
percentNoResp <- NULL#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 100), main=s)#
	# print(xtab)#
	noResp <- xtab['NULL'] / sum(xtab) * 100#
	percentNoResp <- c(percentNoResp, noResp)#
	print(s)#
	print(noResp)#
}#
## percent no response#
par(mar=c(10, 6, 2, 1), family = tfamily, cex=0.48)#
barplot(percentNoResp, names.arg=subjs, ylim=c(0, 40), las=2, space=0.2, legend.text=FALSE)#
abline(mean(percentNoResp), 0, col='red')#
abline(median(percentNoResp), 0, col='blue')#
# # #
# ## all responses#
# par(mar=c(8, 6, 2, 1), family = tfamily, cex=0.4)#
# xtab <- xtabs( ~ resp + workerID, data = results)#
# barplot(xtab, las=2, space=0.2, legend.text=TRUE)#
##############################################
## remove folks who didnt respond#
##############################################
alotoftimeouts <- c(#
                    'A194KANUT0CSBV' # # 34.92647#
                    # 'A1MV8BTMX8MJEO', # 34.92647#
                    # 'A3316W4VTGJ0ED' # 21.32353#
                    # 'AYJVWVZNQVLP5' # 10.66176#
)#
resultsGood <- results#
subjsGood   <- unique(resultsGood $workerID)#
xtab <- xtabs( ~ workerID + resp + stepC1, data = resultsGood)#
xtab#
##############################################
## exclude no response#
##############################################
resultsNoResponse <- resultsGood[resultsGood$resp == 'NULL', ]#
dim(resultsNoResponse)#
resultsRespGood <- resultsGood[resultsGood$resp != 'NULL', ]#
resultsRespGood $resp <- factor(resultsRespGood $resp)#
dim(resultsRespGood)#
summary(resultsRespGood $RT)#
par(family = tfamily)#
plot(resultsRespGood $RT, pch=16, cex=0.1)#
abline(225, 0, col='blue')#
center <- mean(resultsRespGood $RT) * 0.5 + median(resultsRespGood $RT) * 0.5#
abline(center, 0, col='red', lwd=2)#
abline(3700, 0, col='black')#
points(resultsRespGood $RT, pch=16, cex=0.5)#
#
plot(resultsRespGood $RT, typ='l')#
hist(resultsRespGood $RT)#
hist(resultsRespGood $RT, breaks='Scott')#
# hist(resultsRespGood $RT, breaks='FD')#
borders <- c(2, 2, 1.2, 1)#
text.size <- 0.4#
#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- resultsRespGood[ resultsRespGood $workerID == s, ]#
	plot(s.result$RT, main=s, ylim=c(0, 4000), pch=16, cex=0.2)#
	abline(225, 0, col='blue')#
	abline(center, 0, col='red', lwd=2)#
	points(s.result$RT, pch=16, cex=0.8)#
	center <- mean(s.result$RT) * 0.5 + median(s.result$RT) * 0.5#
	# print(dim(s.result))#
}#
resultsRespGood$resp <- factor(resultsRespGood$resp)#
##############################################
## exclude faster than 200ms & practice items#
##############################################
responses <- resultsRespGood[resultsRespGood$RT > 225, ]#
responses$RTlog <- log(responses$RT)#
summary(responses $RT)#
summary(responses $RTlog)#
par(family = tfamily)#
plot(responses $RTlog, pch=16, cex=0.4)#
abline(log(225), 0, col='blue')#
center <- mean(responses $RTlog) * 0.5 + median(responses $RTlog) * 0.5#
abline(center, 0, col='red', lwd=2)#
plot(responses $RTlog, typ='l')#
hist(responses $RT)#
hist(responses $RT, breaks='Scott')#
# hist(responses $RT, breaks='FD')#
hist(responses $RTlog)#
hist(responses $RTlog, breaks='Scott')#
# hist(responses $RTlog, breaks='FD')#
#
# hist(responses $RTlog, breaks=seq(from=5, to=8, by=1/6), xlim=c(5,8))#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	plot(s.result$RTlog, main=s, ylim=c(5, 8.5), pch=16, cex=0.5)#
	# plot(s.result$RTlog, main=s, xlim=c(0, 212), ylim=c(4, 7.9), typ='l')#
	abline(log(225), 0, col='blue')#
	center <- mean(s.result$RTlog) * 0.5 + median(s.result$RTlog) * 0.5#
	abline(center, 0, col='red', lwd=2)#
	print(dim(s.result))#
}#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	hist(s.result$RTlog, breaks=seq(from=5, to=8.5, by=1/5), xlim=c(5,8.5), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/10), xlim=c(4,8), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/20), xlim=c(4,8), main=s)#
}#
# borders <- c(, 2.4, 2, 2.3)#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 300), main=s)#
	print(xtab)#
}#
##############################################
## ID function#
##############################################
head(responses)#
xtab <- xtabs( ~ workerID  + stepC1, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + C2, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + stepC1 + C2, data = responses)#
xtab
xlabel <- '1 [b] – [d] 17'#
ylabel <- 'prop. ‘d’ resp.'#
# xlabelc <- '1 [b] – [d] 17'#
# ylabelc <- 'prop. ‘d’ resp.'#
borders <- c(4.1,4.3,1.5,0.4)#
#
responses $dummy <- 1#
#
length(responses $respNumC1)#
length(responses $stepC1)#
length(responses $dummy)
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepC1, responses $dummy, responses $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumC1, responses $stepC1, mean)#
vsd  <- tapply(responses $respNumC1, responses $stepC1, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
borders <- c(4, 4, 1.2, 0.3)#
text.size <- 0.35#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
head(responses)#
#
sort(unique(responses$stepC1 ))#
endpoints <- responses[responses$stepC1 == 1 | responses$stepC1 == 17, ]#
endpoints$stepC1 <- factor(endpoints$stepC1)
xtab <- xtabs( ~ resp + stepC1, data = endpoints)#
xtab#
subjCorrect <- NULL#
subjWrong   <- NULL#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- endpoints[ endpoints $workerID == s, ]#
	xtab <- xtabs( ~ resp + stepC1, data = s.result)#
	totalb <- sum(xtab[ , 1])#
	correctb <- xtab['B', 1] #
	totald <- sum(xtab[ , 2])#
	correctd <- xtab['D', 2] #
	percentcorrectb <- correctb / totalb * 100#
	percentcorrectd <- correctd / totald * 100#
	print(s)#
	# print( percentcorrect )#
	print( xtab )#
	# barplot( percentcorrectb, ylim=c(0, 100), main=s)#
	if (percentcorrectb > 70 & percentcorrectd > 70 ) {#
		subjCorrect <- c(subjCorrect, s)#
	} else {subjWrong <- c(subjWrong, s)}#
}#
length(subjCorrect)#
length(subjWrong)
tiles <- c(8, 8)#
borders <- c(4, 4, 1.2, 0.3)#
#
text.size <- 0.35#
## correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
tiles <- c(7, 8)#
borders <- c(4, 4, 1.2, 0.3)#
#
text.size <- 0.35#
## correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
wrong#
par(mfrow=c(5,5), mar= borders, cex= text.size, family = tfamily)#
for (s in subjWrong) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
xtab <- xtabs( ~ resp + stepC1, data = endpoints)#
xtab#
xtab <- xtabs( ~ resp + stepC1 + C2, data = endpoints)#
xtab#
xtab <- xtabs( ~ resp + C2 + stepC1, data = endpoints)#
xtab
responsesCorrect <- responses[(responses$workerID %in% subjCorrect), ]
head(responsesCorrect)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepC1, responsesCorrect $dummy, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responsesCorrect $respNumC1, responsesCorrect $stepC1, mean)#
vsd  <- tapply(responsesCorrect $respNumC1, responsesCorrect $stepC1, sd)#
vsem <- vsd / sqrt( length(subjCorrect) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepC1, responsesCorrect $C2, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C2, responsesCorrect $stepC1, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C2, responsesCorrect $dummy, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
par(mfrow=c(7,8), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $C2, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
par(mfrow=c(2,2), mar= borders, cex= 0.4, family = tfamily)
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $C2, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
r = red, l = black#
par(mfrow=c(7,8), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $C2, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
6 * 8
6 * 8 + 5
subjCorrect
8 * 9
8 * 9 + 2
spread#
# mode #
#
# porportion of d/b #
## 7-step continuum b-d  (16 data points each step)#
## 2 contexts __l, __r  (56 data points each context)#
## 8 data points in each step/context cell#
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/4_bdlaaraa_v1/results'#
setwd(directory)
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))
computerproblem <- c('A2TBXASXZIRNNW')#
results <- results[!(results $workerID %in% computerproblem), ]#
results $workerID <- factor(results $workerID)
subjs <- unique(results$workerID)
length(subjs)
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)
subjs <- unique(results$workerID)
length(subjs)
results$dummy <- 1#
results$RT <- results$RT - 0.03521497312835895 * 1000#
results $resp#
class(results $resp)#
#
head(results)#
results $respC1 <- factor(tolower( results $resp) )#
results $respC2 <- factor(tolower(substr(results $resp, 4, 4)))
results $respNumC1 <- ifelse(results $resp == 'B', 0, #
                           ifelse(results $resp == 'D', 1, 5))#
head(results)
duration <- NULL#
for (s in subjs) {#
	subj.results <- results[results$workerID == s, ]#
	xtab <- xtabs( ~ stim, data = subj.results)#
	print(s)#
	howlong <- sum(subj.results$RT)/1000/30#
	print(howlong)#
	duration <- c(duration, howlong)#
	# print( length(subj.results$resp) )#
}#
duration#
summary(duration)#
tfamily <- 'DTLArgoT'#
tiles <- c(8, 8)#
results$RT#
summary(results$RT)#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.6)#
plot(results$RT, typ='l')#
hist(results$RT)#
hist(results$RT, breaks='Scott')#
hist(results$RT, breaks='FD')#
#####################
## practice#
#####################
plot(results$RT[results$trialtype == 'p'], pch=16, cex=0.6)#
plot(results$RT[results$trialtype == 'p'], typ='l')#
xtab <- xtabs( ~ resp, data = results[results$trialtype == 'p', ])#
barplot(xtab)#
#
summary(results$RT[results$trialtype == 'p'])#
par(mfrow= tiles, mar=c(1.9, 2, 1, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s & results$trialtype == 'p', ]#
	# plot(s.result$RT, main=s,typ='l', lwd='1.5', col='blue')#
	plot(s.result$RT, main=s, ylim=c(0, max(results $RT)), typ='l', lwd='1.5', col='blue')#
}#
results <- results[results $trialtype == 't', ]#
#####################
# ## remove extreme slow (6289.3262076)#
# results <- results[results $RT < 6288, ]#
# results[results $RT > 6287, ]#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.5, col='darkblue')#
plot(results$RT, typ='l', col='darkblue')#
plot(sort(results$RT), pch=16, cex=0.6, col='darkblue')#
par(family = tfamily)#
xtab <- xtabs( ~ resp, data = results)#
barplot(xtab)#
summary(results$RT)#
range(results$RT)#
range(results$RT)*1.1#
## RTs#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	print(dim(s.result)[1])#
	plot(s.result$RT, main=s, ylim=c(-200, 4400), typ='l', col='darkblue')#
}#
## C1 responses#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	# print(dim(s.result)[1])#
	plot(s.result$respNumC1, main=s, ylim=c(-0.5, 5.5), pch=16, col='darkblue')#
}#
dim(s.result)#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 200), main=s)#
	print(xtab)#
}#
percentNoResp <- NULL#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 100), main=s)#
	# print(xtab)#
	noResp <- xtab['NULL'] / sum(xtab) * 100#
	percentNoResp <- c(percentNoResp, noResp)#
	print(s)#
	print(noResp)#
}#
## percent no response#
par(mar=c(10, 6, 2, 1), family = tfamily, cex=0.48)#
barplot(percentNoResp, names.arg=subjs, ylim=c(0,15), las=2, space=0.2, legend.text=FALSE)#
abline(mean(percentNoResp), 0, col='red')#
abline(median(percentNoResp), 0, col='blue')#
## all responses#
par(mar=c(8, 6, 2, 1), family = tfamily, cex=0.4)#
xtab <- xtabs( ~ resp + workerID, data = results)#
barplot(xtab, las=2, space=0.2, legend.text=TRUE)#
##############################################
## remove folks who didnt respond#
##############################################
alotoftimeouts <- c(#
                    ''# # 34.92647#
                    # 'A1MV8BTMX8MJEO', # 34.92647#
                    # 'A3316W4VTGJ0ED' # 21.32353#
                    # 'AYJVWVZNQVLP5' # 10.66176#
)#
resultsGood <- results#
subjsGood   <- unique(resultsGood $workerID)#
head(resultsGood)#
xtab <- xtabs( ~ workerID + resp + stepC1, data = resultsGood)#
xtab
resultsNoResponse <- resultsGood[resultsGood$resp == 'NULL', ]#
dim(resultsNoResponse)#
resultsRespGood <- resultsGood[resultsGood$resp != 'NULL', ]#
resultsRespGood $resp <- factor(resultsRespGood $resp)#
dim(resultsRespGood)#
summary(resultsRespGood $RT)#
par(family = tfamily)#
plot(resultsRespGood $RT, pch=16, cex=0.1)#
abline(225, 0, col='blue')#
center <- mean(resultsRespGood $RT) * 0.5 + median(resultsRespGood $RT) * 0.5#
abline(center, 0, col='red', lwd=2)#
abline(3700, 0, col='black')#
points(resultsRespGood $RT, pch=16, cex=0.5)#
#
plot(resultsRespGood $RT, typ='l')#
hist(resultsRespGood $RT)#
hist(resultsRespGood $RT, breaks='Scott')#
# hist(resultsRespGood $RT, breaks='FD')#
borders <- c(2, 2, 1.2, 1)#
text.size <- 0.4#
#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- resultsRespGood[ resultsRespGood $workerID == s, ]#
	plot(s.result$RT, main=s, ylim=c(0, 4000), pch=16, cex=0.2)#
	abline(225, 0, col='blue')#
	abline(center, 0, col='red', lwd=2)#
	points(s.result$RT, pch=16, cex=0.8)#
	center <- mean(s.result$RT) * 0.5 + median(s.result$RT) * 0.5#
	# print(dim(s.result))#
}#
resultsRespGood$resp <- factor(resultsRespGood$resp)#
##############################################
## exclude faster than 200ms & practice items#
##############################################
responses <- resultsRespGood[resultsRespGood$RT > 225, ]#
responses$RTlog <- log(responses$RT)#
summary(responses $RT)#
summary(responses $RTlog)#
par(family = tfamily)#
plot(responses $RTlog, pch=16, cex=0.4)#
abline(log(225), 0, col='blue')#
center <- mean(responses $RTlog) * 0.5 + median(responses $RTlog) * 0.5#
abline(center, 0, col='red', lwd=2)#
plot(responses $RTlog, typ='l')#
hist(responses $RT)#
hist(responses $RT, breaks='Scott')#
# hist(responses $RT, breaks='FD')#
hist(responses $RTlog)#
hist(responses $RTlog, breaks='Scott')#
# hist(responses $RTlog, breaks='FD')#
#
# hist(responses $RTlog, breaks=seq(from=5, to=8, by=1/6), xlim=c(5,8))#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	plot(s.result$RTlog, main=s, ylim=c(5, 8.5), pch=16, cex=0.5)#
	# plot(s.result$RTlog, main=s, xlim=c(0, 212), ylim=c(4, 7.9), typ='l')#
	abline(log(225), 0, col='blue')#
	center <- mean(s.result$RTlog) * 0.5 + median(s.result$RTlog) * 0.5#
	abline(center, 0, col='red', lwd=2)#
	print(dim(s.result))#
}#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	hist(s.result$RTlog, breaks=seq(from=5, to=8.5, by=1/5), xlim=c(5,8.5), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/10), xlim=c(4,8), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/20), xlim=c(4,8), main=s)#
}#
# borders <- c(, 2.4, 2, 2.3)#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 300), main=s)#
	print(xtab)#
}
head(responses)#
xtab <- xtabs( ~ workerID  + stepC1, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + C2, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + stepC1 + C2, data = responses)#
xtab
xlabel <- '1 [b] – [d] 17'#
ylabel <- 'prop. ‘d’ resp.'#
# xlabelc <- '1 [b] – [d] 17'#
# ylabelc <- 'prop. ‘d’ resp.'#
borders <- c(4.1,4.3,1.5,0.4)#
#
responses $dummy <- 1#
#
length(responses $stepC1)#
length(responses $respNumC1)#
length(responses $dummy)
change c to 1, 3, 4, 5, 7, 9, 17#
###
## #
###
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepC1, responses $dummy, responses $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumC1, responses $stepC1, mean)#
vsd  <- tapply(responses $respNumC1, responses $stepC1, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
class(responses $stepC1)
responses $stepC1
head(results)
results $stepC1adj <- ifelse(results $stepC1 == 1, 1, #
							ifelse(results $stepC1 == 2, 5, #
							ifelse(results $stepC1 == 3, 6, #
							ifelse(results $stepC1 == 4, 7, #
							ifelse(results $stepC1 == 5, 8, #
							ifelse(results $stepC1 == 6, 10, 17)#
							)#
							)#
							)#
							)#
							)
head(results)
spread#
# mode #
#
# porportion of d/b #
## 7-step continuum b-d  (16 data points each step)#
## 2 contexts __l, __r  (56 data points each context)#
## 8 data points in each step/context cell#
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/4_bdlaaraa_v1/results'#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepC1', 'C2', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))#
results $stepC1adj <- ifelse(results $stepC1 == 1, 1, #
							ifelse(results $stepC1 == 2, 5, #
							ifelse(results $stepC1 == 3, 6, #
							ifelse(results $stepC1 == 4, 7, #
							ifelse(results $stepC1 == 5, 8, #
							ifelse(results $stepC1 == 6, 10, 17)#
							)#
							)#
							)#
							)#
							)#
computerproblem <- c('A2TBXASXZIRNNW')#
results <- results[!(results $workerID %in% computerproblem), ]#
results $workerID <- factor(results $workerID)#
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)#
subjs <- unique(results$workerID)#
length(subjs)#
results$dummy <- 1#
results$RT <- results$RT - 0.03521497312835895 * 1000#
results $resp#
class(results $resp)#
#
head(results)#
results $respC1 <- factor(tolower( results $resp) )#
results $respC2 <- factor(tolower(substr(results $resp, 4, 4)))#
results $respNumC1 <- ifelse(results $resp == 'B', 0, #
                           ifelse(results $resp == 'D', 1, 5))#
head(results)#
duration <- NULL#
for (s in subjs) {#
	subj.results <- results[results$workerID == s, ]#
	xtab <- xtabs( ~ stim, data = subj.results)#
	print(s)#
	howlong <- sum(subj.results$RT)/1000/30#
	print(howlong)#
	duration <- c(duration, howlong)#
	# print( length(subj.results$resp) )#
}#
duration#
summary(duration)#
tfamily <- 'DTLArgoT'#
tiles <- c(8, 8)#
results$RT#
summary(results$RT)#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.6)#
plot(results$RT, typ='l')#
hist(results$RT)#
hist(results$RT, breaks='Scott')#
hist(results$RT, breaks='FD')#
#####################
## practice#
#####################
plot(results$RT[results$trialtype == 'p'], pch=16, cex=0.6)#
plot(results$RT[results$trialtype == 'p'], typ='l')#
xtab <- xtabs( ~ resp, data = results[results$trialtype == 'p', ])#
barplot(xtab)#
#
summary(results$RT[results$trialtype == 'p'])#
par(mfrow= tiles, mar=c(1.9, 2, 1, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s & results$trialtype == 'p', ]#
	# plot(s.result$RT, main=s,typ='l', lwd='1.5', col='blue')#
	plot(s.result$RT, main=s, ylim=c(0, max(results $RT)), typ='l', lwd='1.5', col='blue')#
}#
results <- results[results $trialtype == 't', ]#
#####################
# ## remove extreme slow (6289.3262076)#
# results <- results[results $RT < 6288, ]#
# results[results $RT > 6287, ]#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.5, col='darkblue')#
plot(results$RT, typ='l', col='darkblue')#
plot(sort(results$RT), pch=16, cex=0.6, col='darkblue')#
par(family = tfamily)#
xtab <- xtabs( ~ resp, data = results)#
barplot(xtab)#
summary(results$RT)#
range(results$RT)#
range(results$RT)*1.1#
## RTs#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	print(dim(s.result)[1])#
	plot(s.result$RT, main=s, ylim=c(-200, 4400), typ='l', col='darkblue')#
}#
## C1 responses#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	# print(dim(s.result)[1])#
	plot(s.result$respNumC1, main=s, ylim=c(-0.5, 5.5), pch=16, col='darkblue')#
}#
dim(s.result)#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 200), main=s)#
	print(xtab)#
}#
percentNoResp <- NULL#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 100), main=s)#
	# print(xtab)#
	noResp <- xtab['NULL'] / sum(xtab) * 100#
	percentNoResp <- c(percentNoResp, noResp)#
	print(s)#
	print(noResp)#
}#
## percent no response#
par(mar=c(10, 6, 2, 1), family = tfamily, cex=0.48)#
barplot(percentNoResp, names.arg=subjs, ylim=c(0,15), las=2, space=0.2, legend.text=FALSE)#
abline(mean(percentNoResp), 0, col='red')#
abline(median(percentNoResp), 0, col='blue')#
## all responses#
par(mar=c(8, 6, 2, 1), family = tfamily, cex=0.4)#
xtab <- xtabs( ~ resp + workerID, data = results)#
barplot(xtab, las=2, space=0.2, legend.text=TRUE)#
##############################################
## remove folks who didnt respond#
##############################################
alotoftimeouts <- c(#
                    ''# # 34.92647#
                    # 'A1MV8BTMX8MJEO', # 34.92647#
                    # 'A3316W4VTGJ0ED' # 21.32353#
                    # 'AYJVWVZNQVLP5' # 10.66176#
)#
resultsGood <- results#
subjsGood   <- unique(resultsGood $workerID)#
head(resultsGood)#
xtab <- xtabs( ~ workerID + resp + stepC1, data = resultsGood)#
xtab#
##############################################
## exclude no response#
##############################################
resultsNoResponse <- resultsGood[resultsGood$resp == 'NULL', ]#
dim(resultsNoResponse)#
resultsRespGood <- resultsGood[resultsGood$resp != 'NULL', ]#
resultsRespGood $resp <- factor(resultsRespGood $resp)#
dim(resultsRespGood)#
summary(resultsRespGood $RT)#
par(family = tfamily)#
plot(resultsRespGood $RT, pch=16, cex=0.1)#
abline(225, 0, col='blue')#
center <- mean(resultsRespGood $RT) * 0.5 + median(resultsRespGood $RT) * 0.5#
abline(center, 0, col='red', lwd=2)#
abline(3700, 0, col='black')#
points(resultsRespGood $RT, pch=16, cex=0.5)#
#
plot(resultsRespGood $RT, typ='l')#
hist(resultsRespGood $RT)#
hist(resultsRespGood $RT, breaks='Scott')#
# hist(resultsRespGood $RT, breaks='FD')#
borders <- c(2, 2, 1.2, 1)#
text.size <- 0.4#
#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- resultsRespGood[ resultsRespGood $workerID == s, ]#
	plot(s.result$RT, main=s, ylim=c(0, 4000), pch=16, cex=0.2)#
	abline(225, 0, col='blue')#
	abline(center, 0, col='red', lwd=2)#
	points(s.result$RT, pch=16, cex=0.8)#
	center <- mean(s.result$RT) * 0.5 + median(s.result$RT) * 0.5#
	# print(dim(s.result))#
}#
resultsRespGood$resp <- factor(resultsRespGood$resp)#
##############################################
## exclude faster than 200ms & practice items#
##############################################
responses <- resultsRespGood[resultsRespGood$RT > 225, ]#
responses$RTlog <- log(responses$RT)#
summary(responses $RT)#
summary(responses $RTlog)#
par(family = tfamily)#
plot(responses $RTlog, pch=16, cex=0.4)#
abline(log(225), 0, col='blue')#
center <- mean(responses $RTlog) * 0.5 + median(responses $RTlog) * 0.5#
abline(center, 0, col='red', lwd=2)#
plot(responses $RTlog, typ='l')#
hist(responses $RT)#
hist(responses $RT, breaks='Scott')#
# hist(responses $RT, breaks='FD')#
hist(responses $RTlog)#
hist(responses $RTlog, breaks='Scott')#
# hist(responses $RTlog, breaks='FD')#
#
# hist(responses $RTlog, breaks=seq(from=5, to=8, by=1/6), xlim=c(5,8))#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	plot(s.result$RTlog, main=s, ylim=c(5, 8.5), pch=16, cex=0.5)#
	# plot(s.result$RTlog, main=s, xlim=c(0, 212), ylim=c(4, 7.9), typ='l')#
	abline(log(225), 0, col='blue')#
	center <- mean(s.result$RTlog) * 0.5 + median(s.result$RTlog) * 0.5#
	abline(center, 0, col='red', lwd=2)#
	print(dim(s.result))#
}#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	hist(s.result$RTlog, breaks=seq(from=5, to=8.5, by=1/5), xlim=c(5,8.5), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/10), xlim=c(4,8), main=s)#
	# hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/20), xlim=c(4,8), main=s)#
}#
# borders <- c(, 2.4, 2, 2.3)#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 300), main=s)#
	print(xtab)#
}#
##############################################
## ID function#
##############################################
head(responses)#
xtab <- xtabs( ~ workerID  + stepC1, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + C2, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + stepC1 + C2, data = responses)#
xtab
head(responses)
xlabel <- '1 [b] – [d] 17'#
ylabel <- 'prop. ‘d’ resp.'#
# xlabelc <- '1 [b] – [d] 17'#
# ylabelc <- 'prop. ‘d’ resp.'#
borders <- c(4.1,4.3,1.5,0.4)#
#
responses $dummy <- 1#
#
length(responses $stepC1adj)#
length(responses $respNumC1)#
length(responses $dummy)
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepC1adj, responses $dummy, responses $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumC1, responses $stepC1adj, mean)#
vsd  <- tapply(responses $respNumC1, responses $stepC1adj, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
borders <- c(4, 4, 1.2, 0.3)#
text.size <- 0.35#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
head(responses)#
#
sort(unique(responses$stepC1 ))#
endpoints <- responses[responses$stepC1 == 1 | responses$stepC1 == 7, ]#
endpoints$stepC1 <- factor(endpoints$stepC1)#
xtab <- xtabs( ~ resp + stepC1, data = endpoints)#
xtab#
subjCorrect <- NULL#
subjWrong   <- NULL#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- endpoints[ endpoints $workerID == s, ]#
	xtab <- xtabs( ~ resp + stepC1, data = s.result)#
	totalb <- sum(xtab[ , 1])#
	correctb <- xtab['B', 1] #
	totald <- sum(xtab[ , 2])#
	correctd <- xtab['D', 2] #
	percentcorrectb <- correctb / totalb * 100#
	percentcorrectd <- correctd / totald * 100#
	print(s)#
	# print( percentcorrect )#
	print( xtab )#
	barplot( percentcorrectb, ylim=c(0, 100), main=s)#
	if (percentcorrectb > 60 & percentcorrectd > 60 ) {#
		subjCorrect <- c(subjCorrect, s)#
	} else {subjWrong <- c(subjWrong, s)}#
}#
length(subjCorrect)#
length(subjWrong)
tiles <- c(8, 7)#
borders <- c(4, 4, 1.2, 0.3)#
#
text.size <- 0.35#
## correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1adj, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
tiles <- c(7, 7)#
borders <- c(4, 4, 1.2, 0.3)#
#
text.size <- 0.35#
## correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1adj, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
wrong#
par(mfrow=c(5,5), mar= borders, cex= text.size, family = tfamily)#
for (s in subjWrong) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1, s.result $dummy, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}
responsesCorrect <- responses[(responses$workerID %in% subjCorrect), ]
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepC1adj, responsesCorrect $dummy, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responsesCorrect $respNumC1, responsesCorrect $stepC1adj, mean)#
vsd  <- tapply(responsesCorrect $respNumC1, responsesCorrect $stepC1adj, sd)#
vsem <- vsd / sqrt( length(subjCorrect) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepC1, responsesCorrect $C2, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C2, responsesCorrect $stepC1, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C2, responsesCorrect $dummy, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
r = red#
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepC1adj, responsesCorrect $C2, responsesCorrect $respNumC1, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)
l = black, r = red#
par(mfrow=c(7,7), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepC1adj, s.result $C2, s.result $respNumC1, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}
6 * 7
6 * 7 + 5
summary(vResp.stepC)
summary(vResp.stepC.slopes)
vResp.stepC.slopes <- lmer(respNumV ~ stepVc + Cc + (1 + stepVc + Cc | workerID), family = "binomial", data = responsesCorrect )#
summary(vResp.stepC.slopes)
vResp.stepC.slopes <- lmer(respNumV ~ stepVc + Cc + (1 + stepVc + Cc | workerID), family = "binomial", data = responsesCorrect )
vResp.stepC <- lmer(respNumV ~ stepVc + Cc + (1 | workerID), family = "binomial", data = responsesCorrect )
head(responsesCorrect)
spread#
# mode #
#
# porportion of d/b #
library(Hmisc)#
library(lattice)#
library(languageR)#
library(lme4)#
#
directory <- '/Volumes/SSD Part2/_userDataSSD2/Experiments/kmDissKM/ibexFarm/6_iubd_v2/results'#
#
setwd(directory)#
resultfile <- 'trialdata.txt'#
columnlist <- c('workerID', 'timestamp', 'IPhash', 'trialtype', 'stepV', 'C', 'stim', 'resp', 'RT', 'disorder', 'lang', 'headphones', 'buttons')#
results <- read.delim(resultfile, header = FALSE, col.names = columnlist)#
#
head(results)#
#
length(unique(results$workerID))#
# # #
#
# computerproblem <- c('A2TBXASXZIRNNW')#
# results <- results[!(results $workerID %in% computerproblem), ]#
# results $workerID <- factor(results $workerID)#
excluded <- results[(results$disorder != 'disorderno' | results$lang != 'eng' | results$headphones != 'headphoneyes'), ]#
results <- results[(results$disorder == 'disorderno' & results$lang == 'eng' & results$headphones == 'headphoneyes'), ]#
results $workerID <- factor(results $workerID)#
subjs <- unique(results$workerID)#
length(subjs)#
results <- results[ , c('workerID', 'trialtype', 'stepV', 'C', 'stim', 'resp', 'RT', 'buttons')]#
results$dummy <- 1#
results$RT <- results$RT - 0.03918245869776482 * 1000#
head(results)#
results $respNumV <- ifelse(results $resp == 'EE', 1, #
                           ifelse(results $resp == 'OO', 0, 5))#
head(results)#
duration <- NULL#
for (s in subjs) {#
	subj.results <- results[results$workerID == s, ]#
	xtab <- xtabs( ~ stim, data = subj.results)#
	print(s)#
	howlong <- sum(subj.results$RT)/1000/30#
	print(howlong)#
	duration <- c(duration, howlong)#
	# print( length(subj.results$resp) )#
}#
duration#
summary(duration)#
tfamily <- 'DTLArgoT'#
tiles <- c(9, 9)#
results$RT#
summary(results$RT)#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.6)#
plot(results$RT, typ='l')#
hist(results$RT)#
hist(results$RT, breaks='Scott')#
hist(results$RT, breaks='FD')#
#####################
## practice#
#####################
plot(results$RT[results$trialtype == 'p'], pch=16, cex=0.6)#
plot(results$RT[results$trialtype == 'p'], typ='l')#
xtab <- xtabs( ~ resp, data = results[results$trialtype == 'p', ])#
barplot(xtab)#
#
summary(results$RT[results$trialtype == 'p'])#
par(mfrow= tiles, mar=c(1.9, 2, 1, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s & results$trialtype == 'p', ]#
	# plot(s.result$RT, main=s,typ='l', lwd='1.5', col='blue')#
	plot(s.result$RT, main=s, ylim=c(0, max(results $RT)), typ='l', lwd='1.5', col='blue')#
}#
results <- results[results $trialtype == 't', ]#
#####################
# ## remove extreme slow (6289.3262076)#
# results <- results[results $RT < 6288, ]#
# results[results $RT > 6287, ]#
par(family = tfamily)#
plot(results$RT, pch=16, cex=0.5, col='darkblue')#
plot(results$RT, typ='l', col='darkblue')#
plot(sort(results$RT), pch=16, cex=0.6, col='darkblue')#
par(family = tfamily)#
xtab <- xtabs( ~ resp, data = results)#
barplot(xtab)#
summary(results$RT)#
range(results$RT)#
range(results$RT)*1.1#
## RTs#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	print(dim(s.result)[1])#
	plot(s.result$RT, main=s, ylim=c(-200, 4400), typ='l', col='darkblue')#
}#
## V responses#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.4, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	# print(dim(s.result)[1])#
	plot(s.result$respNumV, main=s, ylim=c(-0.5, 5.5), pch=16, col='darkblue')#
}#
dim(s.result)#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 200), main=s)#
	print(xtab)#
}#
percentNoResp <- NULL#
par(mfrow= tiles, mar=c(1.9, 2, 2, 0.5), cex=0.5, family = tfamily)#
for (s in subjs) {#
	s.result <- results[ results$workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 100), main=s)#
	# print(xtab)#
	noResp <- xtab['NULL'] / sum(xtab) * 100#
	percentNoResp <- c(percentNoResp, noResp)#
	print(s)#
	print(noResp)#
}#
## percent no response#
par(mar=c(10, 6, 2, 1), family = tfamily, cex=0.48)#
barplot(percentNoResp, names.arg=subjs, ylim=c(0,15), las=2, space=0.2, legend.text=FALSE)#
abline(mean(percentNoResp), 0, col='red')#
abline(median(percentNoResp), 0, col='blue')#
## all responses#
par(mar=c(8, 6, 2, 1), family = tfamily, cex=0.4)#
xtab <- xtabs( ~ resp + workerID, data = results)#
barplot(xtab, las=2, space=0.2, legend.text=TRUE)#
##############################################
## remove folks who didnt respond#
##############################################
alotoftimeouts <- c(#
                    ''# # 34.92647#
                    # 'A1MV8BTMX8MJEO', # 34.92647#
                    # 'A3316W4VTGJ0ED' # 21.32353#
                    # 'AYJVWVZNQVLP5' # 10.66176#
)#
resultsGood <- results#
subjsGood   <- unique(resultsGood $workerID)#
##############################################
## exclude no response#
##############################################
resultsNoResponse <- resultsGood[resultsGood$resp == 'NULL', ]#
dim(resultsNoResponse)#
resultsRespGood <- resultsGood[resultsGood$resp != 'NULL', ]#
resultsRespGood $resp <- factor(resultsRespGood $resp)#
dim(resultsRespGood)#
summary(resultsRespGood $RT)#
par(family = tfamily)#
plot(resultsRespGood $RT, pch=16, cex=0.1)#
abline(225, 0, col='blue')#
center <- mean(resultsRespGood $RT) * 0.5 + median(resultsRespGood $RT) * 0.5#
abline(center, 0, col='red', lwd=2)#
abline(3700, 0, col='black')#
points(resultsRespGood $RT, pch=16, cex=0.5)#
#
plot(resultsRespGood $RT, typ='l')#
hist(resultsRespGood $RT)#
hist(resultsRespGood $RT, breaks='Scott')#
# hist(resultsRespGood $RT, breaks='FD')#
borders <- c(2, 2, 1.2, 1)#
text.size <- 0.4#
#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- resultsRespGood[ resultsRespGood $workerID == s, ]#
	plot(s.result$RT, main=s, ylim=c(0, 4000), pch=16, cex=0.2)#
	abline(225, 0, col='blue')#
	abline(center, 0, col='red', lwd=2)#
	points(s.result$RT, pch=16, cex=0.8)#
	center <- mean(s.result$RT) * 0.5 + median(s.result$RT) * 0.5#
	# print(dim(s.result))#
}#
resultsRespGood$resp <- factor(resultsRespGood$resp)#
##############################################
## exclude faster than 200ms & practice items#
##############################################
responses <- resultsRespGood[resultsRespGood$RT > 225, ]#
responses$RTlog <- log(responses$RT)#
summary(responses $RT)#
summary(responses $RTlog)#
par(family = tfamily)#
plot(responses $RTlog, pch=16, cex=0.4)#
abline(log(225), 0, col='blue')#
center <- mean(responses $RTlog) * 0.5 + median(responses $RTlog) * 0.5#
abline(center, 0, col='red', lwd=2)#
plot(responses $RTlog, typ='l')#
hist(responses $RT)#
hist(responses $RT, breaks='Scott')#
# hist(responses $RT, breaks='FD')#
hist(responses $RTlog)#
hist(responses $RTlog, breaks='Scott')#
# hist(responses $RTlog, breaks='FD')#
#
# hist(responses $RTlog, breaks=seq(from=5, to=8, by=1/6), xlim=c(5,8))#
par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	plot(s.result$RTlog, main=s, ylim=c(5, 8.5), pch=16, cex=0.5)#
	# plot(s.result$RTlog, main=s, xlim=c(0, 212), ylim=c(4, 7.9), typ='l')#
	abline(log(225), 0, col='blue')#
	center <- mean(s.result$RTlog) * 0.5 + median(s.result$RTlog) * 0.5#
	abline(center, 0, col='red', lwd=2)#
	print(dim(s.result))#
}#
# # #
#
# par(mfrow=tiles, mar=borders, cex=text.size, family=tfamily)#
# for (s in subjsGood) {#
	# s.result <- responses[ responses $workerID == s, ]#
	# hist(s.result$RTlog, breaks=seq(from=5, to=8.5, by=1/5), xlim=c(5,8.5), main=s)#
	# # hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/10), xlim=c(4,8), main=s)#
	# # hist(s.result$RTlog, breaks=seq(from=4, to=8, by=1/20), xlim=c(4,8), main=s)#
# }#
# borders <- c(, 2.4, 2, 2.3)#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	xtab <- xtabs( ~ resp, data = s.result)#
	barplot(xtab, ylim=c(0, 300), main=s)#
	print(xtab)#
}#
##############################################
## ID function#
##############################################
head(responses)#
xtab <- xtabs( ~ workerID  + stepV, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + C, data = responses)#
xtab#
#
xtab <- xtabs( ~ workerID  + stepV + C, data = responses)#
xtab#
xlabel <- '1 [i] – [u] 17'#
ylabel <- 'prop. ‘ee’ resp.'#
# xlabelc <- '1 [b] – [d] 17'#
# ylabelc <- 'prop. ‘d’ resp.'#
borders <- c(4.1,4.3,1.5,0.4)#
#
responses $dummy <- 1#
#
length(responses $respNumV)#
length(responses $stepV)#
length(responses $dummy)#
# change c to 1, 3, 4, 5, 6, 8, 17#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responses$stepV, responses $dummy, responses $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responses $respNumV, responses $stepV, mean)#
vsd  <- tapply(responses $respNumV, responses $stepV, sd)#
vsem <- vsd / sqrt( length(subjsGood) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")#
borders <- c(4, 4, 1.2, 0.3)#
text.size <- 0.35#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $dummy, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}#
##############################################
## % correct#
##############################################
head(responses)#
#
sort(unique(responses$stepV ))#
endpoints <- responses[responses$stepV == 1 | responses$stepV == 54, ]#
endpoints$stepV <- factor(endpoints$stepV)#
xtab <- xtabs( ~ resp + stepV, data = endpoints)#
xtab#
subjCorrect <- NULL#
subjWrong   <- NULL#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjsGood) {#
	s.result <- endpoints[ endpoints $workerID == s, ]#
	xtab <- xtabs( ~ resp + stepV, data = s.result)#
	totali <- sum(xtab[ , 1])#
	correcti <- xtab['EE', 1] #
	totalu <- sum(xtab[ , 2])#
	correctu <- xtab['OO', 2] #
	percentcorrecti <- correcti / totali * 100#
	percentcorrectu <- correctu / totalu * 100#
	print(s)#
	# print( percentcorrect )#
	print( xtab )#
	barplot( percentcorrecti, ylim=c(0, 100), main=s)#
	if (percentcorrecti > 70 & percentcorrectu > 70 ) {#
		subjCorrect <- c(subjCorrect, s)#
	} else {subjWrong <- c(subjWrong, s)}#
}#
length(subjCorrect)#
length(subjWrong)#
tiles <- c(9, 9)#
borders <- c(4, 4, 1.2, 0.3)#
#
text.size <- 0.35#
## correct#
par(mfrow= tiles, mar= borders, cex= text.size, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $dummy, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}#
## wrong#
par(mfrow=c(5,5), mar= borders, cex= text.size, family = tfamily)#
for (s in subjWrong) {#
	s.result <- responses[ responses $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $dummy, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main=s, lwd=2, col= ccol)#
}#
xtab <- xtabs( ~ resp + stepV, data = endpoints)#
xtab#
xtab <- xtabs( ~ resp + stepV + C, data = endpoints)#
xtab#
xtab <- xtabs( ~ resp + C + stepV, data = endpoints)#
xtab#
responsesCorrect <- responses[(responses$workerID %in% subjCorrect), ]#
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepV, responsesCorrect $dummy, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=FALSE, ylim=c(0, 1), main='pooled', lwd=2.3)#
vm   <- tapply(responsesCorrect $respNumV, responsesCorrect $stepV, mean)#
vsd  <- tapply(responsesCorrect $respNumV, responsesCorrect $stepV, sd)#
vsem <- vsd / sqrt( length(subjCorrect) ) ##* 1.96#
errbar( c(1:length(vm)), vm, vm + vsem, vm - vsem, add=TRUE, pch="")#
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $stepV, responsesCorrect $C, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)#
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C, responsesCorrect $stepV, responsesCorrect $respNumV, xlab='', ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)#
borders <- c(4.1,4.3,1.5,0.4)#
par(mfrow=c(1,1), mar= borders, cex.lab=1.2, cex.axis=1.1, family = tfamily)#
interaction.plot(responsesCorrect $C, responsesCorrect $dummy, responsesCorrect $respNumV, xlab=xlabel, ylab=ylabel, legend=TRUE, ylim=c(0, 1), main='pooled', lwd=2.3, col=1:7)#
## d=red, b=black#
par(mfrow=c(8,10), mar= borders, cex= 0.4, family = tfamily)#
for (s in subjCorrect) {#
	s.result <- responsesCorrect[ responsesCorrect $workerID == s, ]#
	ccol <- 'darkblue'#
	interaction.plot(s.result $stepV, s.result $C, s.result $respNumV, xlab=xlabel, ylab=ylabel, legend= TRUE, ylim=c(0, 1), main=s, lwd=2, col=1:7)#
}#
unique(responsesCorrect$stepV)#
mean(unique(responsesCorrect$stepV))#
responsesCorrect$stepVc <- responsesCorrect$stepV - mean(unique(responsesCorrect$stepV))#
mean(responsesCorrect$stepVc )#
## b = -1, d = +1#
responsesCorrect$Cc <- ifelse(responsesCorrect$C == 'b', -1, 1)
vResp.stepC <- lmer(respNumV ~ stepVc + Cc + (1 | workerID), family = "binomial", data = responsesCorrect )#
summary(vResp.stepC)
vResp.stepC.slopes <- lmer(respNumV ~ stepVc + Cc + (1 + stepVc + Cc | workerID), family = "binomial", data = responsesCorrect )#
summary(vResp.stepC.slopes)
vResp.stepC.slope_step <- lmer(respNumV ~ stepVc + Cc + (1 + stepVc | workerID), family = "binomial", data = responsesCorrect )
anova(vResp.stepC.slope_step, vResp.stepC.slopes)
vResp.stepC.slope_C <- lmer(respNumV ~ stepVc + Cc + (1 + Cc | workerID), family = "binomial", data = responsesCorrect )
anova(vResp.stepC.slope_C, vResp.stepC.slopes)
anova(vResp.stepC, vResp.stepC.slopes)
summary(vResp.stepC.slopes)
vResp.stepC_nocenter <- lmer(respNumV ~ stepV + C + (1 | workerID), family = "binomial", data = responsesCorrect )
vResp.stepC_nocenter
summary(vResp.stepC_nocenter)
responsesCorrect$C
summary(vResp.stepC_nocenter)
vResp.stepC_nocenter_slope <- lmer(respNumV ~ stepV + C + (1 + stepV  + C | workerID), family = "binomial", data = responsesCorrect )
a
a
summary(vResp.stepC_nocenter_slope)
summary(vResp.stepC)
summary(vResp.stepC.slopes)
12000/74
24 * 2 * 7
12376 / 74
336/2
7 * 2 * 2
x + x*0.11/100 = 211873.77
x * (1 + 0.11/100) = 211873.77
x = 211873.77 / (1 + 0.11/100)
x
211873.77 - (211873.77 / (1 + 0.11/100))
211873.77 - (211873.77 / (1 + 0.11/100))
1653.960/30.405
1653.960/54.398
